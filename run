#!/bin/bash
trap "exit" INT

# relative to script
cd "${BASH_SOURCE%/*}" || exit


# pull the latest image, delete old untagged ones
fetch() {
	# pull latest image
	docker-compose pull $1

	# kill / stop old containers
	docker-compose rm -fs $1

	# find old untagged ones
	old_images=$(docker images -q --filter "dangling=true" --filter "reference=$2")

	# if there are any; delete them
	if [ "$old_images" ]; then
		docker rmi --force $old_images
	fi
}


# sets a command's default action
default() {
	if [ $1 -eq 0 ]; then
		shift
		echo -e "Running default for '$1' command:\n  $0 $*\n"
		$0 $* && exit 0
	fi
}


# handles showing a command's usage info
help() {
	if [ $# -eq 2 ]; then
		if [[ "$1" == "--help" || "$1" == "-h" ]]; then
			echo "$2"
			exit 0
		fi
	fi
}


# download USGS datasets
download() {
	default $# download all
	help $* "Usage: $0 convert [ARGUMENTS]

Arguments:
  all               runs all of the commands below, in order
  gnis	[SUFFIX]    download GNIS data, optionally using SUFFIX, e.g., \"20180201\"
  tnm [DATASET]     download datasets from The National Map, optionally using DATASET, e.g., \"nhd\"
 "

	# args
	case "$1" in
	all)
		download gnis && download tnm
		;;
	gnis)
		shift
		convert download-gnis $*
		;;
	tnm)
		shift
		convert tnm $*
		;;
	*)
		echo -e "Invalid download command \"$1\"\n"
		download --help
	esac
}


# convert source USGS data to RDF
convert() {
	default $# convert all
	help $* "Usage: $0 convert [ARGUMENTS]

Arguments:
  all               runs all of the commands below, in order
  gnis              convert the downloaded GNIS datasets into RDF
  nhd               convert the downloaded NHD datasets into RDF
 "

	# args
	if [ "$1" == "all" ]; then
		convert gnis && convert nhd
		exit 0
	fi

	# pull latest image; run triplifier
	fetch triplifier "bregalia/usgs-triplifier" \
		&& docker-compose run \
			--rm \
			triplifier $*
}


# controls a service
service() {
	service=$1; shift
	image=$1; shift
	port_and_path=$1; shift
	ready_string=$1; shift

	default $# $service --help
	help $* "Usage: $0 $service

Commands:
  up        bring the $service online
  down      shut down and remove the container if it is running
"

	# commands
	case "$1" in
	up)
		# container already exists
		if docker-compose ps -q $service; then
			# container already running
			if [ "$(docker ps -qf id=$container)" ]; then
				echo "$servie already running. see it by running: docker-compose ps $service"
				exit 1
			fi
		fi

		# hostname of local docker machine
		machine_hostname=$(if [ "$(which docker-machine)" ]; then docker-machine ip; else echo "localhost"; fi)

		# deduce what container output is telling us
		subshell=$(cat <<-END
			docker-compose logs -f $service \
				| tee >( grep -m1 -e "$ready_string" > /dev/null && kill -9 \$\$ ) \
				| tee >( grep -m1 -e "exited with code" > /dev/null && kill -2 \$\$ )
		END)

		# pull latest image; bring marmotta up
		fetch $service $image \
			&& docker-compose up \
				-d \
				--no-recreate \
				$service \
			&& { \
				if bash -c "$subshell"; then
					echo -e "\nfailed to start $service"
					exit 1
				fi
			} \
			&& if [ "$port_and_path" ]; then
				echo -e "--------------------------------------------------------------------------" \
					"\n  $service service live at: http://$machine_hostname:$port_and_path" \
					"\n--------------------------------------------------------------------------"
			fi
		;;
	down)
		# stop and remove the container
		docker-compose rm -fsv $service
		;;
	*)
		echo -e "Invalid triplestore command \"$1\"\n"
		triplestore --help
	esac
}


# import data into the triplestore
import() {
	default $# import all
	help $* "Usage: $0 import [ARGUMENTS]

Arguments:
  all           runs all of the commands below, in order
  ttl [FILES]   imports triples in TTL files, defaulting to all files in the data directory, or FILES if given
  tsv [FILES]   imports geometries in TSV files, defaulting to all files in the data directory, or FILES if given
 "

	# pull latest image; import all data
	fetch importer "bregalia/kiwi-bulk-loader" \
		&& docker-compose run \
			--rm \
			importer $*
}


# postgis service for triplifier
postgis() {
	service postgis "kartoza/postgis:10.0-2.4" "" "database system is ready to accept connections" $*
}

# triplestore service
triplestore() {
	service triplestore "bregalia/marmotta" "8080/marmotta" "INFO: Server startup" $*
}


# commands
case "$1" in
download)
	shift
	download $*
	;;
convert)
	shift
	postgis up
	convert $*
	postgis down
	;;
triplestore)
	shift
	triplestore $*
	exit 0
	;;
import)
	shift
	import $*
	;;
frontend)
	shift
	service frontend "bregalia/gnis-ld.org" "3001/" "running on port" $*
	;;
"-h" | "--help" | *)
	echo "Usage: $0 [COMMAND] [ARGS]

Commands:
  download          download data from USGS
  convert           convert USGS datasets into RDF
  triplestore       launch the triplestore as a service
  import            import triples and geometry into the triplestore
  frontend          launch the HTTP web interface frontend as a service

For more information about a specific command, use: $0 [COMMAND] --help
"
esac

exit 0